$input v_color0, v_texcoord0, v_pos, v_normal, paint_map_size, fragDepth

#include <bgfx_shader.sh>
#include <bgfx_compute.sh>

UIMAGE2D_RW(paintMap, rgba8, 1);
SAMPLER2D(stainTex, 0);
const uint max_ubyte = 255;

void main()
{

	// Retrieves color on the previous version of the paint map.
    ivec2 uv_pixels = ivec2(v_texcoord0 * paint_map_size);
    uv_pixels.x = clamp(uv_pixels.x, 0, paint_map_size - 1);
    uv_pixels.y = clamp(uv_pixels.y, 0, paint_map_size - 1);
    float previous_paint_color = imageLoad(paintMap, uv_pixels).r;

    // Retrieves paint color added to the fragment with the current splat.
    vec3 projCoords = v_pos.xyz / v_pos.w;
    projCoords = projCoords * 0.5 + 0.5;

    // Computes incidence angle between paint ball direction and face normal.
    float paintLevel = texture2D(stainTex, projCoords.xy).r;

    
    float range = 0.25;

    if (paintLevel > range ) 
    {
        paintLevel = 1;
    } else {
        paintLevel = 0;
    }
    

	//float paintLevel = 1.0;
    float incidence = dot(v_color0.xyz, v_normal);
    float addedColor = (max_ubyte * paintLevel);


    gl_FragColor = float4(uv_pixels,paintLevel,1);
    //imageStore(paintMap, uv_pixels, vec4(projCoords,1));

    // If dot product < 0 then the face got hit by the paint.
    if (incidence < 0 && paintLevel > 0)
    {
        // Computes new paint color value.
        float paint = min(previous_paint_color, addedColor);

        imageStore(paintMap, uv_pixels, vec4(paintLevel,paintLevel,paintLevel,1));
    } else {

    }


	
}